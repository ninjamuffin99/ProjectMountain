// Generated by Haxe 3.4.0
#ifndef INCLUDED_PlayState
#define INCLUDED_PlayState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS0(ObjectPool)
HX_DECLARE_CLASS0(PlayState)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES PlayState_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef PlayState_obj OBJ_;
		PlayState_obj();

	public:
		enum { _hx_ClassId = 0x46c2835d };

		void __construct( ::Dynamic MaxSize);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="PlayState")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"PlayState"); }
		static hx::ObjectPtr< PlayState_obj > __new( ::Dynamic MaxSize);
		static hx::ObjectPtr< PlayState_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~PlayState_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46"); }

		static void __boot();
		static int TILE_WIDTH;
		static int TILE_HEIGHT;
		static int BASE_SPEED;
		static int xAcceleration;
		static int xDrag;
		static int yAcceleration;
		static int yVelocity;
		static Float jumpDuration;
		 ::flixel::FlxSprite _player;
		Float _jump;
		bool _playJump;
		bool _jumpPressed;
		bool _sfxDie;
		 ::flixel::FlxSprite _ghost;
		int _edge;
		 ::flixel::group::FlxTypedGroup _bgImgGrp;
		 ::flixel::FlxSprite _bgImg1;
		 ::flixel::FlxSprite _bgImg2;
		 ::flixel::FlxSprite _bgImg3;
		::Array< ::String > _bgImages;
		 ::flixel::group::FlxTypedGroup _collisions;
		::Array< ::Dynamic> _tiles;
		 ::ObjectPool _pool;
		bool _change;
		 ::flixel::group::FlxTypedGroup _UIGroup;
		Float _score;
		int _startDistance;
		 ::flixel::text::FlxText _scoreText;
		bool _resetPlatforms;
		 ::flixel::FlxSprite _stumps;
		void create();

		void setupBG();
		::Dynamic setupBG_dyn();

		void setupPlayer();
		::Dynamic setupPlayer_dyn();

		void setupUI();
		::Dynamic setupUI_dyn();

		void setupPlatforms();
		::Dynamic setupPlatforms_dyn();

		void initBg();
		::Dynamic initBg_dyn();

		void initPlayer();
		::Dynamic initPlayer_dyn();

		void initUI();
		::Dynamic initUI_dyn();

		void initPlatforms();
		::Dynamic initPlatforms_dyn();

		void onReset();
		::Dynamic onReset_dyn();

		void update(Float elapsed);

		void updateUI();
		::Dynamic updateUI_dyn();

		void updatePlayer();
		::Dynamic updatePlayer_dyn();

		void updateBg();
		::Dynamic updateBg_dyn();

		void updatePlatforms();
		::Dynamic updatePlatforms_dyn();

		void removeBlocks();
		::Dynamic removeBlocks_dyn();

		 ::flixel::FlxSprite _block;
		void makePlatform(hx::Null< int >  wide,hx::Null< int >  high);
		::Dynamic makePlatform_dyn();

		void makeBlock(Float x,Float y,int tile);
		::Dynamic makeBlock_dyn();

		void setAnimations();
		::Dynamic setAnimations_dyn();

		void positionText();
		::Dynamic positionText_dyn();

};


#endif /* INCLUDED_PlayState */ 
