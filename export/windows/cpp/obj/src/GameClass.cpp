// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_GameClass
#include <GameClass.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_MovieClip
#include <openfl/_legacy/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Stage
#include <openfl/_legacy/display/Stage.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_340016b198213dff_14_new,"GameClass","new",0x66f3c2b8,"GameClass.new","GameClass.hx",14,0xf86cfbb8)

void GameClass_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_340016b198213dff_14_new)
HXLINE(  15)		int stageWidth = ::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageWidth();
HXLINE(  16)		int stageHeight = ::openfl::_legacy::Lib_obj::get_current()->get_stage()->get_stageHeight();
HXLINE(  18)		super::__construct(stageWidth,stageWidth,hx::ClassOf< ::MainMenuState >(),(int)1,(int)60,(int)60,false,false);
            	}

Dynamic GameClass_obj::__CreateEmpty() { return new GameClass_obj; }

void *GameClass_obj::_hx_vtable = 0;

Dynamic GameClass_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GameClass_obj > _hx_result = new GameClass_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GameClass_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x306ae42a) {
		if (inClassId<=(int)0x1f4646c6) {
			if (inClassId<=(int)0x1e88cdcf) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x1e88cdcf;
			} else {
				return inClassId==(int)0x1f4646c6;
			}
		} else {
			return inClassId==(int)0x25b00754 || inClassId==(int)0x306ae42a;
		}
	} else {
		if (inClassId<=(int)0x5fcdb6d3) {
			return inClassId==(int)0x3d2d7617 || inClassId==(int)0x5fcdb6d3;
		} else {
			return inClassId==(int)0x771164c8;
		}
	}
}


hx::ObjectPtr< GameClass_obj > GameClass_obj::__new() {
	hx::ObjectPtr< GameClass_obj > __this = new GameClass_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< GameClass_obj > GameClass_obj::__alloc(hx::Ctx *_hx_ctx) {
	GameClass_obj *__this = (GameClass_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GameClass_obj), true, "GameClass"));
	*(void **)__this = GameClass_obj::_hx_vtable;
	flixel::FlxGame_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct();
	return __this;
}

GameClass_obj::GameClass_obj()
{
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GameClass_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *GameClass_obj_sStaticStorageInfo = 0;
#endif

static void GameClass_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GameClass_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GameClass_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GameClass_obj::__mClass,"__mClass");
};

#endif

hx::Class GameClass_obj::__mClass;

void GameClass_obj::__register()
{
	hx::Object *dummy = new GameClass_obj;
	GameClass_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("GameClass","\xc6","\x46","\x46","\x1f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GameClass_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GameClass_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GameClass_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GameClass_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GameClass_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

