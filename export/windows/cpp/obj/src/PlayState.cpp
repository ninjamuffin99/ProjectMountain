// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_ObjectPool
#include <ObjectPool.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Stump
#include <Stump.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_FlxDebugger
#include <flixel/system/debug/FlxDebugger.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_debug_watch_Watch
#include <flixel/system/debug/watch/Watch.h>
#endif
#ifndef INCLUDED_flixel_system_debug_watch_WatchEntryData
#include <flixel/system/debug/watch/WatchEntryData.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_WatchFrontEnd
#include <flixel/system/frontEnds/WatchFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_9_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",9,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_56_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",56,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_77_setupBG,"PlayState","setupBG",0x72976b71,"PlayState.setupBG","PlayState.hx",77,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_82_setupPlayer,"PlayState","setupPlayer",0x21bcd72d,"PlayState.setupPlayer","PlayState.hx",82,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_97_setupUI,"PlayState","setupUI",0x72977c00,"PlayState.setupUI","PlayState.hx",97,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_104_setupPlatforms,"PlayState","setupPlatforms",0x685b2614,"PlayState.setupPlatforms","PlayState.hx",104,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_117_initBg,"PlayState","initBg",0x9d5f01e6,"PlayState.initBg","PlayState.hx",117,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_121_initPlayer,"PlayState","initPlayer",0xc816bc02,"PlayState.initPlayer","PlayState.hx",121,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_140_initUI,"PlayState","initUI",0x9d5f1255,"PlayState.initUI","PlayState.hx",140,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_146_initPlatforms,"PlayState","initPlatforms",0xc112345f,"PlayState.initPlatforms","PlayState.hx",146,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_156_onReset,"PlayState","onReset",0xc747121f,"PlayState.onReset","PlayState.hx",156,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_172_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",172,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_226_updateUI,"PlayState","updateUI",0x26bdabce,"PlayState.updateUI","PlayState.hx",226,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_236_updatePlayer,"PlayState","updatePlayer",0x52b205fb,"PlayState.updatePlayer","PlayState.hx",236,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_288_updatePlatforms,"PlayState","updatePlatforms",0x6e80ac06,"PlayState.updatePlatforms","PlayState.hx",288,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_303_removeBlocks,"PlayState","removeBlocks",0x324d3d9b,"PlayState.removeBlocks","PlayState.hx",303,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_338_makePlatform,"PlayState","makePlatform",0xc807ba72,"PlayState.makePlatform","PlayState.hx",338,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_392_makeBlock,"PlayState","makeBlock",0xc4e7b02e,"PlayState.makeBlock","PlayState.hx",392,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_404_setAnimations,"PlayState","setAnimations",0xd8243a60,"PlayState.setAnimations","PlayState.hx",404,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_409_positionText,"PlayState","positionText",0x8e8b15a7,"PlayState.positionText","PlayState.hx",409,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_11_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",11,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_12_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",12,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_14_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",14,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_16_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",16,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_18_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",18,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_19_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",19,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_21_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",21,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_23_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",23,0xb30d7781)

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_9_new)
HXLINE(   9)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x46c2835d;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_56_create)
HXLINE(  57)		{
HXLINE(  57)			 ::flixel::math::FlxRect _this = ::flixel::FlxG_obj::worldBounds;
HXDLIN(  57)			_this->width = (int)7000000;
HXDLIN(  57)			_this->height = (int)1000;
            		}
HXLINE(  58)		::flixel::FlxG_obj::camera->set_angle((int)-15);
HXLINE(  60)		::flixel::FlxG_obj::sound->playMusic(HX_("assets/music/Oof.ogg",91,0a,a5,90),null(),null(),null());
HXLINE(  62)		this->setupBG();
HXLINE(  63)		this->setupPlayer();
HXLINE(  64)		{
HXLINE(  64)			this->_jump = (int)-1;
HXDLIN(  64)			this->_playJump = true;
HXDLIN(  64)			this->_jumpPressed = false;
HXDLIN(  64)			this->_sfxDie = true;
HXDLIN(  64)			 ::flixel::FlxSprite _hx_tmp = this->_player;
HXDLIN(  64)			_hx_tmp->setPosition((this->_startDistance * (int)140),(int)0);
HXDLIN(  64)			this->_player->drag->set_x((int)200);
HXDLIN(  64)			this->_player->velocity->set((int)0,(int)0);
HXDLIN(  64)			this->_player->maxVelocity->set((int)250,(int)1400);
HXDLIN(  64)			this->_player->acceleration->set((int)500,(int)1400);
HXDLIN(  64)			int line = (::flixel::FlxG_obj::random->_hx_int((int)0,(int)5,null()) * (int)6);
HXDLIN(  64)			 ::flixel::FlxSprite _hx_tmp1 = this->_ghost;
HXDLIN(  64)			Float _hx_tmp2 = (this->_player->x - ((Float)14.));
HXDLIN(  64)			_hx_tmp1->set_x((_hx_tmp2 + (::flixel::FlxG_obj::width * ((Float)0.5))));
            		}
HXLINE(  65)		this->setupUI();
HXLINE(  67)		this->_stumps =  ::Stump_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  69)		this->setupPlatforms();
HXLINE(  70)		{
HXLINE(  70)			this->_change = false;
HXDLIN(  70)			this->_edge = ((this->_startDistance - (int)1) * (int)70);
HXDLIN(  70)			this->makePlatform((int)16,(int)4);
HXDLIN(  70)			this->makePlatform(null(),null());
            		}
HXLINE(  73)		this->super::create();
            	}


void PlayState_obj::setupBG(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_77_setupBG)
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,setupBG,(void))

void PlayState_obj::setupPlayer(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_82_setupPlayer)
HXLINE(  83)		this->_player =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  84)		this->_player->makeGraphic((int)70,(int)100,null(),null(),null());
HXLINE(  86)		this->_startDistance = ::Std_obj::_hx_int(this->_player->x);
HXLINE(  88)		this->add(this->_player);
HXLINE(  91)		Float _hx_tmp = ((this->_player->x + ::flixel::FlxG_obj::width) - (int)70);
HXDLIN(  91)		this->_ghost =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp,(::flixel::FlxG_obj::height * ((Float)0.6)),null());
HXLINE(  93)		::flixel::FlxG_obj::camera->follow(this->_ghost,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,setupPlayer,(void))

void PlayState_obj::setupUI(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_97_setupUI)
HXLINE(  98)		this->_scoreText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)280,HX_("",00,00,00,00),null(),null());
HXLINE(  99)		this->_scoreText->set_alignment(HX_("right",dc,0b,64,e9));
HXLINE( 100)		this->add(this->_scoreText);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,setupUI,(void))

void PlayState_obj::setupPlatforms(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_104_setupPlatforms)
HXLINE( 105)		this->_pool =  ::ObjectPool_obj::__alloc( HX_CTX ,(int)70,(int)70,HX_("assets/images/tiles.png",35,bc,d1,f5),null(),null());
HXLINE( 107)		this->_tiles = ::Array_obj< ::Dynamic>::__new();
HXLINE( 109)		this->_collisions =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 110)		this->add(this->_collisions);
HXLINE( 112)		this->_resetPlatforms = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,setupPlatforms,(void))

void PlayState_obj::initBg(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_117_initBg)
HXLINE( 117)		int i = ::flixel::FlxG_obj::random->_hx_int((int)0,(int)4,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,initBg,(void))

void PlayState_obj::initPlayer(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_121_initPlayer)
HXLINE( 122)		this->_jump = (int)-1;
HXLINE( 123)		this->_playJump = true;
HXLINE( 124)		this->_jumpPressed = false;
HXLINE( 125)		this->_sfxDie = true;
HXLINE( 127)		 ::flixel::FlxSprite _hx_tmp = this->_player;
HXDLIN( 127)		_hx_tmp->setPosition((this->_startDistance * (int)140),(int)0);
HXLINE( 128)		this->_player->drag->set_x((int)200);
HXLINE( 129)		this->_player->velocity->set((int)0,(int)0);
HXLINE( 130)		this->_player->maxVelocity->set((int)250,(int)1400);
HXLINE( 131)		this->_player->acceleration->set((int)500,(int)1400);
HXLINE( 134)		int line = (::flixel::FlxG_obj::random->_hx_int((int)0,(int)5,null()) * (int)6);
HXLINE( 136)		 ::flixel::FlxSprite _hx_tmp1 = this->_ghost;
HXDLIN( 136)		Float _hx_tmp2 = (this->_player->x - ((Float)14.));
HXDLIN( 136)		_hx_tmp1->set_x((_hx_tmp2 + (::flixel::FlxG_obj::width * ((Float)0.5))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,initPlayer,(void))

void PlayState_obj::initUI(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_140_initUI)
HXLINE( 141)		this->_scoreText->set_y((int)20);
HXLINE( 142)		this->_score = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,initUI,(void))

void PlayState_obj::initPlatforms(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_146_initPlatforms)
HXLINE( 147)		this->_change = false;
HXLINE( 149)		this->_edge = ((this->_startDistance - (int)1) * (int)70);
HXLINE( 151)		this->makePlatform((int)16,(int)4);
HXLINE( 152)		this->makePlatform(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,initPlatforms,(void))

void PlayState_obj::onReset(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_156_onReset)
HXLINE( 157)		this->_resetPlatforms = true;
HXLINE( 158)		this->removeBlocks();
HXLINE( 159)		this->_resetPlatforms = false;
HXLINE( 161)		{
HXLINE( 161)			this->_jump = (int)-1;
HXDLIN( 161)			this->_playJump = true;
HXDLIN( 161)			this->_jumpPressed = false;
HXDLIN( 161)			this->_sfxDie = true;
HXDLIN( 161)			 ::flixel::FlxSprite _hx_tmp = this->_player;
HXDLIN( 161)			_hx_tmp->setPosition((this->_startDistance * (int)140),(int)0);
HXDLIN( 161)			this->_player->drag->set_x((int)200);
HXDLIN( 161)			this->_player->velocity->set((int)0,(int)0);
HXDLIN( 161)			this->_player->maxVelocity->set((int)250,(int)1400);
HXDLIN( 161)			this->_player->acceleration->set((int)500,(int)1400);
HXDLIN( 161)			int line = (::flixel::FlxG_obj::random->_hx_int((int)0,(int)5,null()) * (int)6);
HXDLIN( 161)			 ::flixel::FlxSprite _hx_tmp1 = this->_ghost;
HXDLIN( 161)			Float _hx_tmp2 = (this->_player->x - ((Float)14.));
HXDLIN( 161)			_hx_tmp1->set_x((_hx_tmp2 + (::flixel::FlxG_obj::width * ((Float)0.5))));
            		}
HXLINE( 163)		{
HXLINE( 163)			this->_scoreText->set_y((int)20);
HXDLIN( 163)			this->_score = (int)0;
            		}
HXLINE( 165)		{
HXLINE( 165)			this->_change = false;
HXDLIN( 165)			this->_edge = ((this->_startDistance - (int)1) * (int)70);
HXDLIN( 165)			this->makePlatform((int)16,(int)4);
HXDLIN( 165)			this->makePlatform(null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,onReset,(void))

void PlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_172_update)
HXLINE( 174)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 174)		if (_this->keyManager->checkStatus((int)82,_this->status)) {
HXLINE( 176)			this->onReset();
HXLINE( 178)			return;
            		}
HXLINE( 182)		if ((this->_player->y > ::flixel::FlxG_obj::height)) {
HXLINE( 184)			this->super::update(elapsed);
HXLINE( 186)			return;
            		}
HXLINE( 189)		{
HXLINE( 189)			this->removeBlocks();
HXDLIN( 189)			while(((this->_player->x + ::flixel::FlxG_obj::width) > this->_edge)){
HXLINE( 189)				this->makePlatform(null(),null());
            			}
            		}
HXLINE( 191)		{
HXLINE( 191)			 ::flixel::math::FlxPoint _hx_tmp = this->_player->maxVelocity;
HXDLIN( 191)			_hx_tmp->set_x(((int)250 + ::Std_obj::_hx_int((this->_player->x * ((Float)0.05)))));
HXDLIN( 191)			 ::flixel::input::keyboard::FlxKeyboard _this1 = ::flixel::FlxG_obj::keys;
HXDLIN( 191)			int KeyArray;
HXDLIN( 191)			::String s = HX_("UP",5b,4a,00,00);
HXDLIN( 191)			s = s.toUpperCase();
HXDLIN( 191)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE( 191)				KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            			}
            			else {
HXLINE( 191)				KeyArray = (int)-1;
            			}
HXDLIN( 191)			int KeyArray1;
HXDLIN( 191)			::String s1 = HX_("W",57,00,00,00);
HXDLIN( 191)			s1 = s1.toUpperCase();
HXDLIN( 191)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) {
HXLINE( 191)				KeyArray1 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) );
            			}
            			else {
HXLINE( 191)				KeyArray1 = (int)-1;
            			}
HXDLIN( 191)			::String s2 = HX_("SPACE",a6,c4,54,ff);
HXDLIN( 191)			s2 = s2.toUpperCase();
HXDLIN( 191)			int KeyArray2;
HXDLIN( 191)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) {
HXLINE( 191)				KeyArray2 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) );
            			}
            			else {
HXLINE( 191)				KeyArray2 = (int)-1;
            			}
HXDLIN( 191)			this->_jumpPressed = _this1->checkKeyArrayState(::Array_obj< int >::__new(3)->init(0,KeyArray)->init(1,KeyArray1)->init(2,KeyArray2),(int)1);
HXDLIN( 191)			bool _hx_tmp1;
HXDLIN( 191)			if ((this->_jump != (int)-1)) {
HXLINE( 191)				_hx_tmp1 = this->_jumpPressed;
            			}
            			else {
HXLINE( 191)				_hx_tmp1 = false;
            			}
HXDLIN( 191)			if (_hx_tmp1) {
HXLINE( 191)				bool _hx_tmp2 = (this->_jump == (int)0);
HXDLIN( 191)				 ::PlayState _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 191)				_hx_tmp3->_jump = (_hx_tmp3->_jump + ::flixel::FlxG_obj::elapsed);
HXDLIN( 191)				if ((this->_player->velocity->y >= (int)0)) {
HXLINE( 191)					this->_playJump = true;
HXDLIN( 191)					{
HXLINE( 191)						 ::flixel::FlxSprite _g = this->_player;
HXDLIN( 191)						_g->set_y((_g->y - (int)1));
            					}
HXDLIN( 191)					this->_player->velocity->set_y(((Float)-700.));
HXDLIN( 191)					this->_player->acceleration->set_y((int)-1400);
            				}
HXDLIN( 191)				if ((this->_jump > ((Float)0.3))) {
HXLINE( 191)					this->_player->velocity->set_y(((Float)-700.));
HXDLIN( 191)					this->_jump = (int)-1;
HXDLIN( 191)					this->_playJump = true;
            				}
            			}
            			else {
HXLINE( 191)				bool _hx_tmp4;
HXDLIN( 191)				if (!(!(this->_jumpPressed))) {
HXLINE( 191)					_hx_tmp4 = (this->_jump == (int)-1);
            				}
            				else {
HXLINE( 191)					_hx_tmp4 = true;
            				}
HXDLIN( 191)				if (_hx_tmp4) {
HXLINE( 191)					if ((this->_player->velocity->y < (int)0)) {
HXLINE( 191)						this->_player->acceleration->set_y((int)1400);
HXDLIN( 191)						{
HXLINE( 191)							 ::flixel::math::FlxPoint _g1 = this->_player->velocity;
HXDLIN( 191)							_g1->set_y((_g1->y + ((Float)35.)));
            						}
HXDLIN( 191)						this->_jump = (int)-1;
            					}
            				}
            			}
            		}
HXLINE( 193)		if (this->_change) {
HXLINE( 196)			this->_collisions->update(elapsed);
HXLINE( 198)			this->_change = false;
            		}
HXLINE( 201)		if (::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->_player) ),( ( ::flixel::FlxBasic)(this->_collisions) ),null(),::flixel::FlxObject_obj::separate_dyn())) {
HXLINE( 203)			this->_playJump = false;
HXLINE( 205)			if ((this->_player->velocity->x == (int)0)) {
HXLINE( 208)				this->_jump = (int)-1;
HXLINE( 209)				this->_playJump = false;
            			}
            			else {
HXLINE( 212)				if (!(this->_jumpPressed)) {
HXLINE( 214)					this->_jump = (int)0;
            				}
            			}
            		}
HXLINE( 220)		this->super::update(elapsed);
HXLINE( 222)		{
HXLINE( 222)			 ::PlayState _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 222)			_hx_tmp5->_score = (_hx_tmp5->_score + ::flixel::FlxG_obj::elapsed);
HXDLIN( 222)			{
HXLINE( 222)				 ::flixel::_hx_system::frontEnds::WatchFrontEnd _this2 = ::flixel::FlxG_obj::watch;
HXDLIN( 222)				 ::flixel::_hx_system::debug::watch::Watch _hx_tmp6 = ::flixel::FlxG_obj::game->debugger->watch;
HXDLIN( 222)				_hx_tmp6->add(null(),::flixel::_hx_system::debug::watch::WatchEntryData_obj::FIELD(::flixel::FlxG_obj::sound->music,HX_("time",0d,cc,fc,4c)));
            			}
HXDLIN( 222)			 ::flixel::text::FlxText _hx_tmp7 = this->_scoreText;
HXDLIN( 222)			_hx_tmp7->set_x(((this->_player->x + ::flixel::FlxG_obj::width) - (int)280));
HXDLIN( 222)			 ::flixel::FlxSprite _hx_tmp8 = this->_ghost;
HXDLIN( 222)			Float _hx_tmp9 = (this->_player->x - ((Float)14.));
HXDLIN( 222)			_hx_tmp8->set_x((_hx_tmp9 + (::flixel::FlxG_obj::width * ((Float).5))));
            		}
            	}


void PlayState_obj::updateUI(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_226_updateUI)
HXLINE( 227)		 ::PlayState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 227)		_hx_tmp->_score = (_hx_tmp->_score + ::flixel::FlxG_obj::elapsed);
HXLINE( 229)		{
HXLINE( 229)			 ::flixel::_hx_system::frontEnds::WatchFrontEnd _this = ::flixel::FlxG_obj::watch;
HXDLIN( 229)			 ::flixel::_hx_system::debug::watch::Watch _hx_tmp1 = ::flixel::FlxG_obj::game->debugger->watch;
HXDLIN( 229)			_hx_tmp1->add(null(),::flixel::_hx_system::debug::watch::WatchEntryData_obj::FIELD(::flixel::FlxG_obj::sound->music,HX_("time",0d,cc,fc,4c)));
            		}
HXLINE( 230)		 ::flixel::text::FlxText _hx_tmp2 = this->_scoreText;
HXDLIN( 230)		_hx_tmp2->set_x(((this->_player->x + ::flixel::FlxG_obj::width) - (int)280));
HXLINE( 232)		 ::flixel::FlxSprite _hx_tmp3 = this->_ghost;
HXDLIN( 232)		Float _hx_tmp4 = (this->_player->x - ((Float)14.));
HXDLIN( 232)		_hx_tmp3->set_x((_hx_tmp4 + (::flixel::FlxG_obj::width * ((Float).5))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateUI,(void))

void PlayState_obj::updatePlayer(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_236_updatePlayer)
HXLINE( 237)		 ::flixel::math::FlxPoint _hx_tmp = this->_player->maxVelocity;
HXDLIN( 237)		_hx_tmp->set_x(((int)250 + ::Std_obj::_hx_int((this->_player->x * ((Float)0.05)))));
HXLINE( 239)		 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN( 239)		int KeyArray;
HXDLIN( 239)		::String s = HX_("UP",5b,4a,00,00);
HXDLIN( 239)		s = s.toUpperCase();
HXDLIN( 239)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE( 239)			KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            		}
            		else {
HXLINE( 239)			KeyArray = (int)-1;
            		}
HXDLIN( 239)		int KeyArray1;
HXDLIN( 239)		::String s1 = HX_("W",57,00,00,00);
HXDLIN( 239)		s1 = s1.toUpperCase();
HXDLIN( 239)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) {
HXLINE( 239)			KeyArray1 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) );
            		}
            		else {
HXLINE( 239)			KeyArray1 = (int)-1;
            		}
HXDLIN( 239)		::String s2 = HX_("SPACE",a6,c4,54,ff);
HXDLIN( 239)		s2 = s2.toUpperCase();
HXDLIN( 239)		int KeyArray2;
HXDLIN( 239)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) {
HXLINE( 239)			KeyArray2 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) );
            		}
            		else {
HXLINE( 239)			KeyArray2 = (int)-1;
            		}
HXDLIN( 239)		this->_jumpPressed = _this->checkKeyArrayState(::Array_obj< int >::__new(3)->init(0,KeyArray)->init(1,KeyArray1)->init(2,KeyArray2),(int)1);
HXLINE( 241)		bool _hx_tmp1;
HXDLIN( 241)		if ((this->_jump != (int)-1)) {
HXLINE( 241)			_hx_tmp1 = this->_jumpPressed;
            		}
            		else {
HXLINE( 241)			_hx_tmp1 = false;
            		}
HXDLIN( 241)		if (_hx_tmp1) {
HXLINE( 243)			bool _hx_tmp2 = (this->_jump == (int)0);
HXLINE( 248)			 ::PlayState _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 248)			_hx_tmp3->_jump = (_hx_tmp3->_jump + ::flixel::FlxG_obj::elapsed);
HXLINE( 250)			if ((this->_player->velocity->y >= (int)0)) {
HXLINE( 253)				this->_playJump = true;
HXLINE( 255)				{
HXLINE( 255)					 ::flixel::FlxSprite _g = this->_player;
HXDLIN( 255)					_g->set_y((_g->y - (int)1));
            				}
HXLINE( 257)				this->_player->velocity->set_y(((Float)-700.));
HXLINE( 259)				this->_player->acceleration->set_y((int)-1400);
            			}
HXLINE( 262)			if ((this->_jump > ((Float)0.3))) {
HXLINE( 264)				this->_player->velocity->set_y(((Float)-700.));
HXLINE( 266)				this->_jump = (int)-1;
HXLINE( 268)				this->_playJump = true;
            			}
            		}
            		else {
HXLINE( 273)			bool _hx_tmp4;
HXDLIN( 273)			if (!(!(this->_jumpPressed))) {
HXLINE( 273)				_hx_tmp4 = (this->_jump == (int)-1);
            			}
            			else {
HXLINE( 273)				_hx_tmp4 = true;
            			}
HXDLIN( 273)			if (_hx_tmp4) {
HXLINE( 275)				if ((this->_player->velocity->y < (int)0)) {
HXLINE( 277)					this->_player->acceleration->set_y((int)1400);
HXLINE( 279)					{
HXLINE( 279)						 ::flixel::math::FlxPoint _g1 = this->_player->velocity;
HXDLIN( 279)						_g1->set_y((_g1->y + ((Float)35.)));
            					}
HXLINE( 281)					this->_jump = (int)-1;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updatePlayer,(void))

void PlayState_obj::updatePlatforms(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_288_updatePlatforms)
HXLINE( 289)		this->removeBlocks();
HXLINE( 291)		while(((this->_player->x + ::flixel::FlxG_obj::width) > this->_edge)){
HXLINE( 293)			this->makePlatform(null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updatePlatforms,(void))

void PlayState_obj::removeBlocks(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_303_removeBlocks)
HXLINE( 304)		Float distance = (this->_player->x - (int)420);
HXLINE( 307)		if (this->_resetPlatforms) {
HXLINE( 309)			distance = (distance + this->_edge);
            		}
HXLINE( 312)		bool ticker = true;
HXLINE( 314)		while(true){
HXLINE( 314)			bool _hx_tmp;
HXDLIN( 314)			if (ticker) {
HXLINE( 314)				_hx_tmp = (this->_tiles->length != (int)0);
            			}
            			else {
HXLINE( 314)				_hx_tmp = false;
            			}
HXDLIN( 314)			if (!(_hx_tmp)) {
HXLINE( 314)				goto _hx_goto_17;
            			}
HXLINE( 316)			if ((this->_tiles->__get((int)0).StaticCast<  ::flixel::FlxSprite >()->x < distance)) {
HXLINE( 318)				this->_block = this->_tiles->shift().StaticCast<  ::flixel::FlxSprite >();
HXLINE( 320)				this->_collisions->remove(this->_block,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 322)				this->_pool->returnObj(this->_block);
HXLINE( 324)				ticker = true;
HXLINE( 326)				this->_change = true;
            			}
            			else {
HXLINE( 330)				ticker = false;
            			}
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,removeBlocks,(void))

void PlayState_obj::makePlatform(hx::Null< int >  __o_wide,hx::Null< int >  __o_high){
int wide = __o_wide.Default(0);
int high = __o_high.Default(0);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_338_makePlatform)
HXLINE( 339)		if ((wide == (int)0)) {
HXLINE( 341)			int wide1 = (::flixel::FlxG_obj::random->_hx_int((int)0,(int)5,null()) + (int)4);
HXDLIN( 341)			wide = (wide1 + ::Std_obj::_hx_int((this->_player->x * ((Float)0.00015))));
HXLINE( 343)			::flixel::FlxG_obj::log->advanced(wide,::flixel::_hx_system::debug::log::LogStyle_obj::NORMAL,null());
            		}
HXLINE( 345)		if ((high == (int)0)) {
HXLINE( 347)			high = (::flixel::FlxG_obj::random->_hx_int((int)0,(int)3,null()) + (int)1);
            		}
HXLINE( 350)		int line = (::flixel::FlxG_obj::random->_hx_int((int)0,(int)9,null()) * (int)4);
HXLINE( 352)		int top = ::flixel::FlxG_obj::height;
HXDLIN( 352)		int top1 = (top - (high * (int)70));
HXLINE( 354)		{
HXLINE( 354)			Float x = this->_edge;
HXDLIN( 354)			this->_block = this->_pool->getObj();
HXDLIN( 354)			this->_block->setPosition(x,top1);
HXDLIN( 354)			 ::flixel::FlxSprite _hx_tmp = this->_block;
HXDLIN( 354)			_hx_tmp->set_frame(this->_block->frames->frames->__get(line).StaticCast<  ::flixel::graphics::frames::FlxFrame >());
HXDLIN( 354)			this->_tiles->push(this->_block);
HXDLIN( 354)			this->_collisions->add(this->_block).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE( 356)		{
HXLINE( 356)			Float x1 = (this->_edge + (int)70);
HXDLIN( 356)			this->_block = this->_pool->getObj();
HXDLIN( 356)			this->_block->setPosition(x1,top1);
HXDLIN( 356)			 ::flixel::FlxSprite _hx_tmp1 = this->_block;
HXDLIN( 356)			::Array< ::Dynamic> _hx_tmp2 = this->_block->frames->frames;
HXDLIN( 356)			_hx_tmp1->set_frame(_hx_tmp2->__get((line + (int)1)).StaticCast<  ::flixel::graphics::frames::FlxFrame >());
HXDLIN( 356)			this->_tiles->push(this->_block);
HXDLIN( 356)			this->_collisions->add(this->_block).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE( 358)		 ::PlayState _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 358)		_hx_tmp3->_edge = (_hx_tmp3->_edge + (int)140);
HXLINE( 360)		{
HXLINE( 360)			int _g1 = (int)0;
HXDLIN( 360)			int _g = wide;
HXDLIN( 360)			while((_g1 < _g)){
HXLINE( 360)				_g1 = (_g1 + (int)1);
HXDLIN( 360)				int row = (_g1 - (int)1);
HXLINE( 362)				{
HXLINE( 362)					Float x2 = this->_edge;
HXDLIN( 362)					this->_block = this->_pool->getObj();
HXDLIN( 362)					this->_block->setPosition(x2,top1);
HXDLIN( 362)					 ::flixel::FlxSprite _hx_tmp4 = this->_block;
HXDLIN( 362)					::Array< ::Dynamic> _hx_tmp5 = this->_block->frames->frames;
HXDLIN( 362)					_hx_tmp4->set_frame(_hx_tmp5->__get((line + (int)1)).StaticCast<  ::flixel::graphics::frames::FlxFrame >());
HXDLIN( 362)					this->_tiles->push(this->_block);
HXDLIN( 362)					this->_collisions->add(this->_block).StaticCast<  ::flixel::FlxBasic >();
            				}
HXLINE( 364)				{
HXLINE( 364)					int _g3 = (int)1;
HXDLIN( 364)					int _g2 = high;
HXDLIN( 364)					while((_g3 < _g2)){
HXLINE( 364)						_g3 = (_g3 + (int)1);
HXDLIN( 364)						int c = (_g3 - (int)1);
HXLINE( 366)						{
HXLINE( 366)							Float x3 = this->_edge;
HXDLIN( 366)							this->_block = this->_pool->getObj();
HXDLIN( 366)							 ::flixel::FlxSprite _hx_tmp6 = this->_block;
HXDLIN( 366)							_hx_tmp6->setPosition(x3,(top1 + (c * (int)70)));
HXDLIN( 366)							 ::flixel::FlxSprite _hx_tmp7 = this->_block;
HXDLIN( 366)							::Array< ::Dynamic> _hx_tmp8 = this->_block->frames->frames;
HXDLIN( 366)							_hx_tmp7->set_frame(_hx_tmp8->__get((line + (int)3)).StaticCast<  ::flixel::graphics::frames::FlxFrame >());
HXDLIN( 366)							this->_tiles->push(this->_block);
HXDLIN( 366)							this->_collisions->add(this->_block).StaticCast<  ::flixel::FlxBasic >();
            						}
            					}
            				}
HXLINE( 369)				 ::PlayState _hx_tmp9 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 369)				_hx_tmp9->_edge = (_hx_tmp9->_edge + (int)70);
            			}
            		}
HXLINE( 372)		{
HXLINE( 372)			Float x4 = this->_edge;
HXDLIN( 372)			this->_block = this->_pool->getObj();
HXDLIN( 372)			this->_block->setPosition(x4,top1);
HXDLIN( 372)			 ::flixel::FlxSprite _hx_tmp10 = this->_block;
HXDLIN( 372)			::Array< ::Dynamic> _hx_tmp11 = this->_block->frames->frames;
HXDLIN( 372)			_hx_tmp10->set_frame(_hx_tmp11->__get((line + (int)1)).StaticCast<  ::flixel::graphics::frames::FlxFrame >());
HXDLIN( 372)			this->_tiles->push(this->_block);
HXDLIN( 372)			this->_collisions->add(this->_block).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE( 374)		{
HXLINE( 374)			Float x5 = (this->_edge + (int)70);
HXDLIN( 374)			this->_block = this->_pool->getObj();
HXDLIN( 374)			this->_block->setPosition(x5,top1);
HXDLIN( 374)			 ::flixel::FlxSprite _hx_tmp12 = this->_block;
HXDLIN( 374)			::Array< ::Dynamic> _hx_tmp13 = this->_block->frames->frames;
HXDLIN( 374)			_hx_tmp12->set_frame(_hx_tmp13->__get((line + (int)2)).StaticCast<  ::flixel::graphics::frames::FlxFrame >());
HXDLIN( 374)			this->_tiles->push(this->_block);
HXDLIN( 374)			this->_collisions->add(this->_block).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE( 376)		if ((::flixel::FlxG_obj::random->_hx_float((int)0,(int)100,null()) < (int)50)) {
HXLINE( 378)			 ::flixel::FlxSprite _hx_tmp14 = this->_stumps;
HXDLIN( 378)			int _hx_tmp15 = this->_edge;
HXDLIN( 378)			 ::flixel::math::FlxRandom _hx_tmp16 = ::flixel::FlxG_obj::random;
HXDLIN( 378)			_hx_tmp14->set_x((_hx_tmp15 + _hx_tmp16->_hx_int(((int)70 * -(wide)),(int)70,null())));
HXLINE( 379)			 ::flixel::FlxSprite _hx_tmp17 = this->_stumps;
HXDLIN( 379)			_hx_tmp17->set_y((top1 - (int)70));
HXLINE( 381)			this->add(this->_stumps);
HXLINE( 383)			this->_collisions->add(this->_stumps).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE( 386)		 ::PlayState _hx_tmp18 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 386)		int _hx_tmp19 = _hx_tmp18->_edge;
HXDLIN( 386)		int _hx_tmp20 = ::Std_obj::_hx_int(((Float)this->_player->x / (Float)((Float)63.)));
HXDLIN( 386)		_hx_tmp18->_edge = (_hx_tmp19 + (_hx_tmp20 + ((::flixel::FlxG_obj::random->_hx_int((int)0,(int)2,null()) + (int)3) * (int)70)));
HXLINE( 388)		this->_change = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,makePlatform,(void))

void PlayState_obj::makeBlock(Float x,Float y,int tile){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_392_makeBlock)
HXLINE( 393)		this->_block = this->_pool->getObj();
HXLINE( 394)		this->_block->setPosition(x,y);
HXLINE( 395)		 ::flixel::FlxSprite _hx_tmp = this->_block;
HXDLIN( 395)		_hx_tmp->set_frame(this->_block->frames->frames->__get(tile).StaticCast<  ::flixel::graphics::frames::FlxFrame >());
HXLINE( 397)		this->_tiles->push(this->_block);
HXLINE( 399)		this->_collisions->add(this->_block).StaticCast<  ::flixel::FlxBasic >();
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,makeBlock,(void))

void PlayState_obj::setAnimations(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_404_setAnimations)
HXLINE( 404)		int line = (::flixel::FlxG_obj::random->_hx_int((int)0,(int)5,null()) * (int)6);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,setAnimations,(void))

void PlayState_obj::positionText(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_409_positionText)
HXLINE( 409)		 ::flixel::text::FlxText _hx_tmp = this->_scoreText;
HXDLIN( 409)		_hx_tmp->set_x(((this->_player->x + ::flixel::FlxG_obj::width) - (int)280));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,positionText,(void))

int PlayState_obj::TILE_WIDTH;

int PlayState_obj::TILE_HEIGHT;

int PlayState_obj::BASE_SPEED;

int PlayState_obj::xAcceleration;

int PlayState_obj::xDrag;

int PlayState_obj::yAcceleration;

int PlayState_obj::yVelocity;

Float PlayState_obj::jumpDuration;


hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	PlayState_obj *__this = (PlayState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(_player,"_player");
	HX_MARK_MEMBER_NAME(_jump,"_jump");
	HX_MARK_MEMBER_NAME(_playJump,"_playJump");
	HX_MARK_MEMBER_NAME(_jumpPressed,"_jumpPressed");
	HX_MARK_MEMBER_NAME(_sfxDie,"_sfxDie");
	HX_MARK_MEMBER_NAME(_ghost,"_ghost");
	HX_MARK_MEMBER_NAME(_edge,"_edge");
	HX_MARK_MEMBER_NAME(_collisions,"_collisions");
	HX_MARK_MEMBER_NAME(_tiles,"_tiles");
	HX_MARK_MEMBER_NAME(_pool,"_pool");
	HX_MARK_MEMBER_NAME(_change,"_change");
	HX_MARK_MEMBER_NAME(_UIGroup,"_UIGroup");
	HX_MARK_MEMBER_NAME(_score,"_score");
	HX_MARK_MEMBER_NAME(_startDistance,"_startDistance");
	HX_MARK_MEMBER_NAME(_scoreText,"_scoreText");
	HX_MARK_MEMBER_NAME(_resetPlatforms,"_resetPlatforms");
	HX_MARK_MEMBER_NAME(_stumps,"_stumps");
	HX_MARK_MEMBER_NAME(_block,"_block");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_player,"_player");
	HX_VISIT_MEMBER_NAME(_jump,"_jump");
	HX_VISIT_MEMBER_NAME(_playJump,"_playJump");
	HX_VISIT_MEMBER_NAME(_jumpPressed,"_jumpPressed");
	HX_VISIT_MEMBER_NAME(_sfxDie,"_sfxDie");
	HX_VISIT_MEMBER_NAME(_ghost,"_ghost");
	HX_VISIT_MEMBER_NAME(_edge,"_edge");
	HX_VISIT_MEMBER_NAME(_collisions,"_collisions");
	HX_VISIT_MEMBER_NAME(_tiles,"_tiles");
	HX_VISIT_MEMBER_NAME(_pool,"_pool");
	HX_VISIT_MEMBER_NAME(_change,"_change");
	HX_VISIT_MEMBER_NAME(_UIGroup,"_UIGroup");
	HX_VISIT_MEMBER_NAME(_score,"_score");
	HX_VISIT_MEMBER_NAME(_startDistance,"_startDistance");
	HX_VISIT_MEMBER_NAME(_scoreText,"_scoreText");
	HX_VISIT_MEMBER_NAME(_resetPlatforms,"_resetPlatforms");
	HX_VISIT_MEMBER_NAME(_stumps,"_stumps");
	HX_VISIT_MEMBER_NAME(_block,"_block");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlayState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_jump") ) { return hx::Val( _jump); }
		if (HX_FIELD_EQ(inName,"_edge") ) { return hx::Val( _edge); }
		if (HX_FIELD_EQ(inName,"_pool") ) { return hx::Val( _pool); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_ghost") ) { return hx::Val( _ghost); }
		if (HX_FIELD_EQ(inName,"_tiles") ) { return hx::Val( _tiles); }
		if (HX_FIELD_EQ(inName,"_score") ) { return hx::Val( _score); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn()); }
		if (HX_FIELD_EQ(inName,"initBg") ) { return hx::Val( initBg_dyn()); }
		if (HX_FIELD_EQ(inName,"initUI") ) { return hx::Val( initUI_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		if (HX_FIELD_EQ(inName,"_block") ) { return hx::Val( _block); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_player") ) { return hx::Val( _player); }
		if (HX_FIELD_EQ(inName,"_sfxDie") ) { return hx::Val( _sfxDie); }
		if (HX_FIELD_EQ(inName,"_change") ) { return hx::Val( _change); }
		if (HX_FIELD_EQ(inName,"_stumps") ) { return hx::Val( _stumps); }
		if (HX_FIELD_EQ(inName,"setupBG") ) { return hx::Val( setupBG_dyn()); }
		if (HX_FIELD_EQ(inName,"setupUI") ) { return hx::Val( setupUI_dyn()); }
		if (HX_FIELD_EQ(inName,"onReset") ) { return hx::Val( onReset_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_UIGroup") ) { return hx::Val( _UIGroup); }
		if (HX_FIELD_EQ(inName,"updateUI") ) { return hx::Val( updateUI_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_playJump") ) { return hx::Val( _playJump); }
		if (HX_FIELD_EQ(inName,"makeBlock") ) { return hx::Val( makeBlock_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_scoreText") ) { return hx::Val( _scoreText); }
		if (HX_FIELD_EQ(inName,"initPlayer") ) { return hx::Val( initPlayer_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_collisions") ) { return hx::Val( _collisions); }
		if (HX_FIELD_EQ(inName,"setupPlayer") ) { return hx::Val( setupPlayer_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_jumpPressed") ) { return hx::Val( _jumpPressed); }
		if (HX_FIELD_EQ(inName,"updatePlayer") ) { return hx::Val( updatePlayer_dyn()); }
		if (HX_FIELD_EQ(inName,"removeBlocks") ) { return hx::Val( removeBlocks_dyn()); }
		if (HX_FIELD_EQ(inName,"makePlatform") ) { return hx::Val( makePlatform_dyn()); }
		if (HX_FIELD_EQ(inName,"positionText") ) { return hx::Val( positionText_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"initPlatforms") ) { return hx::Val( initPlatforms_dyn()); }
		if (HX_FIELD_EQ(inName,"setAnimations") ) { return hx::Val( setAnimations_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_startDistance") ) { return hx::Val( _startDistance); }
		if (HX_FIELD_EQ(inName,"setupPlatforms") ) { return hx::Val( setupPlatforms_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_resetPlatforms") ) { return hx::Val( _resetPlatforms); }
		if (HX_FIELD_EQ(inName,"updatePlatforms") ) { return hx::Val( updatePlatforms_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PlayState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_jump") ) { _jump=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_edge") ) { _edge=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pool") ) { _pool=inValue.Cast<  ::ObjectPool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_ghost") ) { _ghost=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tiles") ) { _tiles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_score") ) { _score=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_block") ) { _block=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_player") ) { _player=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_sfxDie") ) { _sfxDie=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_change") ) { _change=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_stumps") ) { _stumps=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_UIGroup") ) { _UIGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_playJump") ) { _playJump=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_scoreText") ) { _scoreText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_collisions") ) { _collisions=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_jumpPressed") ) { _jumpPressed=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_startDistance") ) { _startDistance=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_resetPlatforms") ) { _resetPlatforms=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6"));
	outFields->push(HX_HCSTRING("_jump","\xcd","\xe0","\x7a","\xf9"));
	outFields->push(HX_HCSTRING("_playJump","\x61","\x20","\x13","\x7e"));
	outFields->push(HX_HCSTRING("_jumpPressed","\x55","\x7d","\x3e","\x82"));
	outFields->push(HX_HCSTRING("_sfxDie","\x5a","\x4b","\xe6","\x73"));
	outFields->push(HX_HCSTRING("_ghost","\x90","\xd6","\x3f","\x8f"));
	outFields->push(HX_HCSTRING("_edge","\x1c","\xe4","\x1f","\xf6"));
	outFields->push(HX_HCSTRING("_collisions","\xe0","\x88","\xa2","\xca"));
	outFields->push(HX_HCSTRING("_tiles","\xc6","\x44","\x1c","\x0c"));
	outFields->push(HX_HCSTRING("_pool","\xbb","\x9c","\x6d","\xfd"));
	outFields->push(HX_HCSTRING("_change","\x0f","\xa3","\xe9","\x25"));
	outFields->push(HX_HCSTRING("_UIGroup","\xcc","\x41","\x88","\x65"));
	outFields->push(HX_HCSTRING("_score","\x93","\xba","\xc0","\x74"));
	outFields->push(HX_HCSTRING("_startDistance","\xf8","\xe5","\x06","\xaf"));
	outFields->push(HX_HCSTRING("_scoreText","\xe0","\xf8","\x5f","\x38"));
	outFields->push(HX_HCSTRING("_resetPlatforms","\x30","\x57","\x53","\x36"));
	outFields->push(HX_HCSTRING("_stumps","\x1b","\xe9","\xa5","\x81"));
	outFields->push(HX_HCSTRING("_block","\x8e","\xbc","\xe3","\xb0"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(PlayState_obj,_player),HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6")},
	{hx::fsFloat,(int)offsetof(PlayState_obj,_jump),HX_HCSTRING("_jump","\xcd","\xe0","\x7a","\xf9")},
	{hx::fsBool,(int)offsetof(PlayState_obj,_playJump),HX_HCSTRING("_playJump","\x61","\x20","\x13","\x7e")},
	{hx::fsBool,(int)offsetof(PlayState_obj,_jumpPressed),HX_HCSTRING("_jumpPressed","\x55","\x7d","\x3e","\x82")},
	{hx::fsBool,(int)offsetof(PlayState_obj,_sfxDie),HX_HCSTRING("_sfxDie","\x5a","\x4b","\xe6","\x73")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(PlayState_obj,_ghost),HX_HCSTRING("_ghost","\x90","\xd6","\x3f","\x8f")},
	{hx::fsInt,(int)offsetof(PlayState_obj,_edge),HX_HCSTRING("_edge","\x1c","\xe4","\x1f","\xf6")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,_collisions),HX_HCSTRING("_collisions","\xe0","\x88","\xa2","\xca")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(PlayState_obj,_tiles),HX_HCSTRING("_tiles","\xc6","\x44","\x1c","\x0c")},
	{hx::fsObject /*::ObjectPool*/ ,(int)offsetof(PlayState_obj,_pool),HX_HCSTRING("_pool","\xbb","\x9c","\x6d","\xfd")},
	{hx::fsBool,(int)offsetof(PlayState_obj,_change),HX_HCSTRING("_change","\x0f","\xa3","\xe9","\x25")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,_UIGroup),HX_HCSTRING("_UIGroup","\xcc","\x41","\x88","\x65")},
	{hx::fsFloat,(int)offsetof(PlayState_obj,_score),HX_HCSTRING("_score","\x93","\xba","\xc0","\x74")},
	{hx::fsInt,(int)offsetof(PlayState_obj,_startDistance),HX_HCSTRING("_startDistance","\xf8","\xe5","\x06","\xaf")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(PlayState_obj,_scoreText),HX_HCSTRING("_scoreText","\xe0","\xf8","\x5f","\x38")},
	{hx::fsBool,(int)offsetof(PlayState_obj,_resetPlatforms),HX_HCSTRING("_resetPlatforms","\x30","\x57","\x53","\x36")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(PlayState_obj,_stumps),HX_HCSTRING("_stumps","\x1b","\xe9","\xa5","\x81")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(PlayState_obj,_block),HX_HCSTRING("_block","\x8e","\xbc","\xe3","\xb0")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &PlayState_obj::TILE_WIDTH,HX_HCSTRING("TILE_WIDTH","\xd5","\x5e","\xc1","\xb3")},
	{hx::fsInt,(void *) &PlayState_obj::TILE_HEIGHT,HX_HCSTRING("TILE_HEIGHT","\x18","\x14","\xc1","\x4b")},
	{hx::fsInt,(void *) &PlayState_obj::BASE_SPEED,HX_HCSTRING("BASE_SPEED","\x79","\xa9","\x61","\xde")},
	{hx::fsInt,(void *) &PlayState_obj::xAcceleration,HX_HCSTRING("xAcceleration","\xd8","\x20","\xae","\x14")},
	{hx::fsInt,(void *) &PlayState_obj::xDrag,HX_HCSTRING("xDrag","\x8c","\xf4","\x5e","\x45")},
	{hx::fsInt,(void *) &PlayState_obj::yAcceleration,HX_HCSTRING("yAcceleration","\x59","\x9e","\x6e","\x5a")},
	{hx::fsInt,(void *) &PlayState_obj::yVelocity,HX_HCSTRING("yVelocity","\xb6","\x5f","\xca","\xac")},
	{hx::fsFloat,(void *) &PlayState_obj::jumpDuration,HX_HCSTRING("jumpDuration","\x62","\x2e","\x7d","\x36")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6"),
	HX_HCSTRING("_jump","\xcd","\xe0","\x7a","\xf9"),
	HX_HCSTRING("_playJump","\x61","\x20","\x13","\x7e"),
	HX_HCSTRING("_jumpPressed","\x55","\x7d","\x3e","\x82"),
	HX_HCSTRING("_sfxDie","\x5a","\x4b","\xe6","\x73"),
	HX_HCSTRING("_ghost","\x90","\xd6","\x3f","\x8f"),
	HX_HCSTRING("_edge","\x1c","\xe4","\x1f","\xf6"),
	HX_HCSTRING("_collisions","\xe0","\x88","\xa2","\xca"),
	HX_HCSTRING("_tiles","\xc6","\x44","\x1c","\x0c"),
	HX_HCSTRING("_pool","\xbb","\x9c","\x6d","\xfd"),
	HX_HCSTRING("_change","\x0f","\xa3","\xe9","\x25"),
	HX_HCSTRING("_UIGroup","\xcc","\x41","\x88","\x65"),
	HX_HCSTRING("_score","\x93","\xba","\xc0","\x74"),
	HX_HCSTRING("_startDistance","\xf8","\xe5","\x06","\xaf"),
	HX_HCSTRING("_scoreText","\xe0","\xf8","\x5f","\x38"),
	HX_HCSTRING("_resetPlatforms","\x30","\x57","\x53","\x36"),
	HX_HCSTRING("_stumps","\x1b","\xe9","\xa5","\x81"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("setupBG","\x82","\x41","\x56","\x28"),
	HX_HCSTRING("setupPlayer","\xbe","\x89","\x6e","\x18"),
	HX_HCSTRING("setupUI","\x11","\x52","\x56","\x28"),
	HX_HCSTRING("setupPlatforms","\x23","\xa4","\x1c","\xfe"),
	HX_HCSTRING("initBg","\xf5","\x58","\x4c","\x97"),
	HX_HCSTRING("initPlayer","\x91","\x46","\xfe","\x3b"),
	HX_HCSTRING("initUI","\x64","\x69","\x4c","\x97"),
	HX_HCSTRING("initPlatforms","\x30","\x6d","\x82","\x0d"),
	HX_HCSTRING("onReset","\x30","\xe8","\x05","\x7d"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("updateUI","\x9d","\x24","\xfa","\x77"),
	HX_HCSTRING("updatePlayer","\x4a","\x92","\x7c","\x37"),
	HX_HCSTRING("updatePlatforms","\x17","\x7b","\x0d","\xe2"),
	HX_HCSTRING("removeBlocks","\xea","\xc9","\x17","\x17"),
	HX_HCSTRING("_block","\x8e","\xbc","\xe3","\xb0"),
	HX_HCSTRING("makePlatform","\xc1","\x46","\xd2","\xac"),
	HX_HCSTRING("makeBlock","\x7f","\xec","\x94","\x88"),
	HX_HCSTRING("setAnimations","\x31","\x73","\x94","\x24"),
	HX_HCSTRING("positionText","\xf6","\xa1","\x55","\x73"),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(PlayState_obj::TILE_WIDTH,"TILE_WIDTH");
	HX_MARK_MEMBER_NAME(PlayState_obj::TILE_HEIGHT,"TILE_HEIGHT");
	HX_MARK_MEMBER_NAME(PlayState_obj::BASE_SPEED,"BASE_SPEED");
	HX_MARK_MEMBER_NAME(PlayState_obj::xAcceleration,"xAcceleration");
	HX_MARK_MEMBER_NAME(PlayState_obj::xDrag,"xDrag");
	HX_MARK_MEMBER_NAME(PlayState_obj::yAcceleration,"yAcceleration");
	HX_MARK_MEMBER_NAME(PlayState_obj::yVelocity,"yVelocity");
	HX_MARK_MEMBER_NAME(PlayState_obj::jumpDuration,"jumpDuration");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(PlayState_obj::TILE_WIDTH,"TILE_WIDTH");
	HX_VISIT_MEMBER_NAME(PlayState_obj::TILE_HEIGHT,"TILE_HEIGHT");
	HX_VISIT_MEMBER_NAME(PlayState_obj::BASE_SPEED,"BASE_SPEED");
	HX_VISIT_MEMBER_NAME(PlayState_obj::xAcceleration,"xAcceleration");
	HX_VISIT_MEMBER_NAME(PlayState_obj::xDrag,"xDrag");
	HX_VISIT_MEMBER_NAME(PlayState_obj::yAcceleration,"yAcceleration");
	HX_VISIT_MEMBER_NAME(PlayState_obj::yVelocity,"yVelocity");
	HX_VISIT_MEMBER_NAME(PlayState_obj::jumpDuration,"jumpDuration");
};

#endif

hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_HCSTRING("TILE_WIDTH","\xd5","\x5e","\xc1","\xb3"),
	HX_HCSTRING("TILE_HEIGHT","\x18","\x14","\xc1","\x4b"),
	HX_HCSTRING("BASE_SPEED","\x79","\xa9","\x61","\xde"),
	HX_HCSTRING("xAcceleration","\xd8","\x20","\xae","\x14"),
	HX_HCSTRING("xDrag","\x8c","\xf4","\x5e","\x45"),
	HX_HCSTRING("yAcceleration","\x59","\x9e","\x6e","\x5a"),
	HX_HCSTRING("yVelocity","\xb6","\x5f","\xca","\xac"),
	HX_HCSTRING("jumpDuration","\x62","\x2e","\x7d","\x36"),
	::String(null())
};

void PlayState_obj::__register()
{
	hx::Object *dummy = new PlayState_obj;
	PlayState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_11_boot)
HXLINE(  11)		TILE_WIDTH = (int)70;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_12_boot)
HXLINE(  12)		TILE_HEIGHT = (int)70;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_14_boot)
HXLINE(  14)		BASE_SPEED = (int)250;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_16_boot)
HXLINE(  16)		xAcceleration = (int)500;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_18_boot)
HXLINE(  18)		xDrag = (int)200;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_19_boot)
HXLINE(  19)		yAcceleration = (int)1400;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_21_boot)
HXLINE(  21)		yVelocity = (int)1400;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_23_boot)
HXLINE(  23)		jumpDuration = ((Float)0.3);
            	}
}

