// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_DefaultAssetLibrary
#include <DefaultAssetLibrary.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED___ASSET__flixel_fonts_monsterrat_ttf
#include <__ASSET__flixel_fonts_monsterrat_ttf.h>
#endif
#ifndef INCLUDED___ASSET__flixel_fonts_nokiafc22_ttf
#include <__ASSET__flixel_fonts_nokiafc22_ttf.h>
#endif
#ifndef INCLUDED___ASSET__flixel_images_logo_default_png
#include <__ASSET__flixel_images_logo_default_png.h>
#endif
#ifndef INCLUDED___ASSET__flixel_images_ui_button_png
#include <__ASSET__flixel_images_ui_button_png.h>
#endif
#ifndef INCLUDED___ASSET__flixel_sounds_beep_ogg
#include <__ASSET__flixel_sounds_beep_ogg.h>
#endif
#ifndef INCLUDED___ASSET__flixel_sounds_flixel_ogg
#include <__ASSET__flixel_sounds_flixel_ogg.h>
#endif
#ifndef INCLUDED_cpp_vm_Deque
#include <cpp/vm/Deque.h>
#endif
#ifndef INCLUDED_cpp_vm_Thread
#include <cpp/vm/Thread.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_Unserializer
#include <haxe/Unserializer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl__legacy_AssetLibrary
#include <openfl/_legacy/AssetLibrary.h>
#endif
#ifndef INCLUDED_openfl__legacy_AssetType
#include <openfl/_legacy/AssetType.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_media_Sound
#include <openfl/_legacy/media/Sound.h>
#endif
#ifndef INCLUDED_openfl__legacy_net_URLRequest
#include <openfl/_legacy/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_Font
#include <openfl/_legacy/text/Font.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_FontStyle
#include <openfl/_legacy/text/FontStyle.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_FontType
#include <openfl/_legacy/text/FontType.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_ByteArray
#include <openfl/_legacy/utils/ByteArray.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IDataInput
#include <openfl/_legacy/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IDataOutput
#include <openfl/_legacy/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IMemoryRange
#include <openfl/_legacy/utils/IMemoryRange.h>
#endif
#ifndef INCLUDED_openfl_media_SoundLoaderContext
#include <openfl/media/SoundLoaderContext.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_37_new,"DefaultAssetLibrary","new",0xbc37e41e,"DefaultAssetLibrary.new","DefaultAssetLibrary.hx",37,0x0fc48912)
HX_DEFINE_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_146_new,"DefaultAssetLibrary","new",0xbc37e41e,"DefaultAssetLibrary.new","DefaultAssetLibrary.hx",146,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_178_exists,"DefaultAssetLibrary","exists",0x972074de,"DefaultAssetLibrary.exists","DefaultAssetLibrary.hx",178,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_205_getBitmapData,"DefaultAssetLibrary","getBitmapData",0xb8207f2d,"DefaultAssetLibrary.getBitmapData","DefaultAssetLibrary.hx",205,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_220_getBytes,"DefaultAssetLibrary","getBytes",0x86b4b377,"DefaultAssetLibrary.getBytes","DefaultAssetLibrary.hx",220,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_235_getFont,"DefaultAssetLibrary","getFont",0x974ed843,"DefaultAssetLibrary.getFont","DefaultAssetLibrary.hx",235,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_252_getMusic,"DefaultAssetLibrary","getMusic",0xd9777bb1,"DefaultAssetLibrary.getMusic","DefaultAssetLibrary.hx",252,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_273_getPath,"DefaultAssetLibrary","getPath",0x9de06019,"DefaultAssetLibrary.getPath","DefaultAssetLibrary.hx",273,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_282_getSound,"DefaultAssetLibrary","getSound",0x49e937db,"DefaultAssetLibrary.getSound","DefaultAssetLibrary.hx",282,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_295_getText,"DefaultAssetLibrary","getText",0xa0884721,"DefaultAssetLibrary.getText","DefaultAssetLibrary.hx",295,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_314_isLocal,"DefaultAssetLibrary","isLocal",0x968237df,"DefaultAssetLibrary.isLocal","DefaultAssetLibrary.hx",314,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_319_list,"DefaultAssetLibrary","list",0xf3604ee0,"DefaultAssetLibrary.list","DefaultAssetLibrary.hx",319,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_340_loadBitmapData,"DefaultAssetLibrary","loadBitmapData",0x9243e881,"DefaultAssetLibrary.loadBitmapData","DefaultAssetLibrary.hx",340,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_347_loadBytes,"DefaultAssetLibrary","loadBytes",0x8c71caa3,"DefaultAssetLibrary.loadBytes","DefaultAssetLibrary.hx",347,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_354_loadFont,"DefaultAssetLibrary","loadFont",0x1da5ca97,"DefaultAssetLibrary.loadFont","DefaultAssetLibrary.hx",354,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_361_loadManifest,"DefaultAssetLibrary","loadManifest",0x6f596c77,"DefaultAssetLibrary.loadManifest","DefaultAssetLibrary.hx",361,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_417_loadMusic,"DefaultAssetLibrary","loadMusic",0xdf3492dd,"DefaultAssetLibrary.loadMusic","DefaultAssetLibrary.hx",417,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_424_loadSound,"DefaultAssetLibrary","loadSound",0x4fa64f07,"DefaultAssetLibrary.loadSound","DefaultAssetLibrary.hx",424,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_433_loadText,"DefaultAssetLibrary","loadText",0x26df3975,"DefaultAssetLibrary.loadText","DefaultAssetLibrary.hx",433,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_429_loadText,"DefaultAssetLibrary","loadText",0x26df3975,"DefaultAssetLibrary.loadText","DefaultAssetLibrary.hx",429,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_478___load,"DefaultAssetLibrary","__load",0xcdf05448,"DefaultAssetLibrary.__load","DefaultAssetLibrary.hx",478,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_452___doWork,"DefaultAssetLibrary","__doWork",0x3075ad9e,"DefaultAssetLibrary.__doWork","DefaultAssetLibrary.hx",452,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_492___poll,"DefaultAssetLibrary","__poll",0xd0953861,"DefaultAssetLibrary.__poll","DefaultAssetLibrary.hx",492,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_40_boot,"DefaultAssetLibrary","boot",0xecc8b6b4,"DefaultAssetLibrary.boot","DefaultAssetLibrary.hx",40,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_41_boot,"DefaultAssetLibrary","boot",0xecc8b6b4,"DefaultAssetLibrary.boot","DefaultAssetLibrary.hx",41,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_42_boot,"DefaultAssetLibrary","boot",0xecc8b6b4,"DefaultAssetLibrary.boot","DefaultAssetLibrary.hx",42,0x0fc48912)
HX_LOCAL_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_43_boot,"DefaultAssetLibrary","boot",0xecc8b6b4,"DefaultAssetLibrary.boot","DefaultAssetLibrary.hx",43,0x0fc48912)

void DefaultAssetLibrary_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_37_new)
HXLINE(  48)		this->type =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  47)		this->path =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  46)		this->className =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  54)		 ::DefaultAssetLibrary _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  56)		super::__construct();
HXLINE(  84)		::openfl::_legacy::text::Font_obj::registerFont(hx::ClassOf< ::__ASSET__flixel_fonts_nokiafc22_ttf >());
HXLINE(  85)		::openfl::_legacy::text::Font_obj::registerFont(hx::ClassOf< ::__ASSET__flixel_fonts_monsterrat_ttf >());
HXLINE(  92)		bool useManifest = false;
HXLINE(  93)		useManifest = true;
HXLINE(  94)		useManifest = true;
HXLINE(  95)		useManifest = true;
HXLINE(  96)		useManifest = true;
HXLINE(  97)		useManifest = true;
HXLINE(  98)		useManifest = true;
HXLINE(  99)		useManifest = true;
HXLINE( 100)		useManifest = true;
HXLINE( 101)		useManifest = true;
HXLINE( 102)		useManifest = true;
HXLINE( 103)		useManifest = true;
HXLINE( 104)		useManifest = true;
HXLINE( 105)		useManifest = true;
HXLINE( 106)		useManifest = true;
HXLINE( 107)		useManifest = true;
HXLINE( 108)		useManifest = true;
HXLINE( 109)		useManifest = true;
HXLINE( 110)		useManifest = true;
HXLINE( 111)		useManifest = true;
HXLINE( 112)		useManifest = true;
HXLINE( 113)		useManifest = true;
HXLINE( 114)		useManifest = true;
HXLINE( 115)		useManifest = true;
HXLINE( 117)		this->className->set(HX_("flixel/sounds/beep.ogg",c7,05,0e,d0),hx::ClassOf< ::__ASSET__flixel_sounds_beep_ogg >());
HXLINE( 118)		this->type->set(HX_("flixel/sounds/beep.ogg",c7,05,0e,d0),::openfl::_legacy::AssetType_obj::SOUND_dyn());
HXLINE( 120)		this->className->set(HX_("flixel/sounds/flixel.ogg",35,e0,ef,88),hx::ClassOf< ::__ASSET__flixel_sounds_flixel_ogg >());
HXLINE( 121)		this->type->set(HX_("flixel/sounds/flixel.ogg",35,e0,ef,88),::openfl::_legacy::AssetType_obj::SOUND_dyn());
HXLINE( 123)		this->className->set(HX_("flixel/fonts/nokiafc22.ttf",59,d0,25,83),hx::ClassOf< ::__ASSET__flixel_fonts_nokiafc22_ttf >());
HXLINE( 124)		this->type->set(HX_("flixel/fonts/nokiafc22.ttf",59,d0,25,83),::openfl::_legacy::AssetType_obj::FONT_dyn());
HXLINE( 126)		this->className->set(HX_("flixel/fonts/monsterrat.ttf",01,2e,a7,65),hx::ClassOf< ::__ASSET__flixel_fonts_monsterrat_ttf >());
HXLINE( 127)		this->type->set(HX_("flixel/fonts/monsterrat.ttf",01,2e,a7,65),::openfl::_legacy::AssetType_obj::FONT_dyn());
HXLINE( 129)		this->className->set(HX_("flixel/images/ui/button.png",44,ee,2f,34),hx::ClassOf< ::__ASSET__flixel_images_ui_button_png >());
HXLINE( 130)		this->type->set(HX_("flixel/images/ui/button.png",44,ee,2f,34),::openfl::_legacy::AssetType_obj::IMAGE_dyn());
HXLINE( 132)		this->className->set(HX_("flixel/images/logo/default.png",1c,39,3e,0e),hx::ClassOf< ::__ASSET__flixel_images_logo_default_png >());
HXLINE( 133)		this->type->set(HX_("flixel/images/logo/default.png",1c,39,3e,0e),::openfl::_legacy::AssetType_obj::IMAGE_dyn());
HXLINE( 136)		if (useManifest) {
HXLINE( 138)			this->loadManifest();
HXLINE( 140)			if ((::Sys_obj::args()->indexOf(HX_("-livereload",b2,45,9f,14),null()) > (int)-1)) {
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::DefaultAssetLibrary,_gthis,::String,path) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_146_new)
HXLINE( 148)					Float modified = ( ( ::Date)(::sys::FileSystem_obj::stat(path)->__Field(HX_("mtime",fa,06,aa,0f),hx::paccDynamic)) )->getTime();
HXLINE( 150)					if ((modified > _gthis->lastModified)) {
HXLINE( 152)						_gthis->lastModified = modified;
HXLINE( 153)						_gthis->loadManifest();
HXLINE( 155)						if (hx::IsNotNull( _gthis->eventCallback )) {
HXLINE( 157)							_gthis->eventCallback(_gthis,HX_("change",70,91,72,b7));
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 142)				::String path = ::sys::FileSystem_obj::fullPath(HX_("manifest",af,fb,29,d0));
HXLINE( 143)				this->lastModified = ( ( ::Date)(::sys::FileSystem_obj::stat(path)->__Field(HX_("mtime",fa,06,aa,0f),hx::paccDynamic)) )->getTime();
HXLINE( 145)				this->timer =  ::haxe::Timer_obj::__alloc( HX_CTX ,(int)2000);
HXLINE( 146)				this->timer->run =  ::Dynamic(new _hx_Closure_0(_gthis,path));
            			}
            		}
            	}

Dynamic DefaultAssetLibrary_obj::__CreateEmpty() { return new DefaultAssetLibrary_obj; }

void *DefaultAssetLibrary_obj::_hx_vtable = 0;

Dynamic DefaultAssetLibrary_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DefaultAssetLibrary_obj > _hx_result = new DefaultAssetLibrary_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DefaultAssetLibrary_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0b1e32b7) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0b1e32b7;
	} else {
		return inClassId==(int)0x3a783d2c;
	}
}

bool DefaultAssetLibrary_obj::exists(::String id, ::openfl::_legacy::AssetType type){
            	HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_178_exists)
HXLINE( 180)		 ::openfl::_legacy::AssetType assetType = this->type->get(id).StaticCast<  ::openfl::_legacy::AssetType >();
HXLINE( 182)		if (hx::IsNotNull( assetType )) {
HXLINE( 184)			bool _hx_tmp;
HXDLIN( 184)			if (hx::IsNotEq( assetType,type )) {
HXLINE( 184)				bool _hx_tmp1;
HXDLIN( 184)				if (hx::IsNotEq( type,::openfl::_legacy::AssetType_obj::SOUND_dyn() )) {
HXLINE( 184)					_hx_tmp1 = hx::IsEq( type,::openfl::_legacy::AssetType_obj::MUSIC_dyn() );
            				}
            				else {
HXLINE( 184)					_hx_tmp1 = true;
            				}
HXDLIN( 184)				if (_hx_tmp1) {
HXLINE( 184)					if (hx::IsNotEq( assetType,::openfl::_legacy::AssetType_obj::MUSIC_dyn() )) {
HXLINE( 184)						_hx_tmp = hx::IsEq( assetType,::openfl::_legacy::AssetType_obj::SOUND_dyn() );
            					}
            					else {
HXLINE( 184)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE( 184)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 184)				_hx_tmp = true;
            			}
HXDLIN( 184)			if (_hx_tmp) {
HXLINE( 186)				return true;
            			}
HXLINE( 190)			bool _hx_tmp2;
HXDLIN( 190)			bool _hx_tmp3;
HXDLIN( 190)			if (hx::IsNotEq( type,::openfl::_legacy::AssetType_obj::BINARY_dyn() )) {
HXLINE( 190)				_hx_tmp3 = hx::IsNull( type );
            			}
            			else {
HXLINE( 190)				_hx_tmp3 = true;
            			}
HXDLIN( 190)			if (!(_hx_tmp3)) {
HXLINE( 190)				if (hx::IsEq( assetType,::openfl::_legacy::AssetType_obj::BINARY_dyn() )) {
HXLINE( 190)					_hx_tmp2 = hx::IsEq( type,::openfl::_legacy::AssetType_obj::TEXT_dyn() );
            				}
            				else {
HXLINE( 190)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE( 190)				_hx_tmp2 = true;
            			}
HXDLIN( 190)			if (_hx_tmp2) {
HXLINE( 192)				return true;
            			}
            		}
HXLINE( 198)		return false;
            	}


 ::openfl::_legacy::display::BitmapData DefaultAssetLibrary_obj::getBitmapData(::String id){
            	HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_205_getBitmapData)
HXLINE( 205)		if (this->className->exists(id)) {
HXLINE( 207)			return ::Type_obj::createInstance(this->className->get(id),::cpp::VirtualArray_obj::__new(0));
            		}
            		else {
HXLINE( 211)			return ::openfl::_legacy::display::BitmapData_obj::load(( (::String)(this->path->get(id)) ),null());
            		}
HXLINE( 205)		return null();
            	}


 ::openfl::_legacy::utils::ByteArray DefaultAssetLibrary_obj::getBytes(::String id){
            	HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_220_getBytes)
HXLINE( 220)		if (this->className->exists(id)) {
HXLINE( 222)			return ::Type_obj::createInstance(this->className->get(id),::cpp::VirtualArray_obj::__new(0));
            		}
            		else {
HXLINE( 226)			return ::openfl::_legacy::utils::ByteArray_obj::readFile(( (::String)(this->path->get(id)) ));
            		}
HXLINE( 220)		return null();
            	}


 ::openfl::_legacy::text::Font DefaultAssetLibrary_obj::getFont(::String id){
            	HX_GC_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_235_getFont)
HXLINE( 235)		if (this->className->exists(id)) {
HXLINE( 237)			 ::Dynamic fontClass = this->className->get(id);
HXLINE( 238)			::openfl::_legacy::text::Font_obj::registerFont(fontClass);
HXLINE( 239)			return ::Type_obj::createInstance(fontClass,::cpp::VirtualArray_obj::__new(0));
            		}
            		else {
HXLINE( 243)			return  ::openfl::_legacy::text::Font_obj::__alloc( HX_CTX ,this->path->get(id),null(),null());
            		}
HXLINE( 235)		return null();
            	}


 ::openfl::_legacy::media::Sound DefaultAssetLibrary_obj::getMusic(::String id){
            	HX_GC_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_252_getMusic)
HXLINE( 252)		if (this->className->exists(id)) {
HXLINE( 254)			return ::Type_obj::createInstance(this->className->get(id),::cpp::VirtualArray_obj::__new(0));
            		}
            		else {
HXLINE( 258)			return  ::openfl::_legacy::media::Sound_obj::__alloc( HX_CTX , ::openfl::_legacy::net::URLRequest_obj::__alloc( HX_CTX ,this->path->get(id)),null(),true);
            		}
HXLINE( 252)		return null();
            	}


::String DefaultAssetLibrary_obj::getPath(::String id){
            	HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_273_getPath)
HXLINE( 273)		return this->path->get(id);
            	}


 ::openfl::_legacy::media::Sound DefaultAssetLibrary_obj::getSound(::String id){
            	HX_GC_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_282_getSound)
HXLINE( 282)		if (this->className->exists(id)) {
HXLINE( 284)			return ::Type_obj::createInstance(this->className->get(id),::cpp::VirtualArray_obj::__new(0));
            		}
            		else {
HXLINE( 288)			 ::openfl::_legacy::net::URLRequest _hx_tmp =  ::openfl::_legacy::net::URLRequest_obj::__alloc( HX_CTX ,this->path->get(id));
HXDLIN( 288)			return  ::openfl::_legacy::media::Sound_obj::__alloc( HX_CTX ,_hx_tmp,null(),hx::IsEq( this->type->get(id).StaticCast<  ::openfl::_legacy::AssetType >(),::openfl::_legacy::AssetType_obj::MUSIC_dyn() ));
            		}
HXLINE( 282)		return null();
            	}


::String DefaultAssetLibrary_obj::getText(::String id){
            	HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_295_getText)
HXLINE( 297)		 ::openfl::_legacy::utils::ByteArray bytes = this->getBytes(id);
HXLINE( 299)		if (hx::IsNull( bytes )) {
HXLINE( 301)			return null();
            		}
            		else {
HXLINE( 305)			return bytes->readUTFBytes(bytes->length);
            		}
HXLINE( 299)		return null();
            	}


bool DefaultAssetLibrary_obj::isLocal(::String id, ::openfl::_legacy::AssetType type){
            	HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_314_isLocal)
HXLINE( 314)		return true;
            	}


::Array< ::String > DefaultAssetLibrary_obj::list( ::openfl::_legacy::AssetType type){
            	HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_319_list)
HXLINE( 321)		::Array< ::String > items = ::Array_obj< ::String >::__new(0);
HXLINE( 323)		{
HXLINE( 323)			 ::Dynamic id = this->type->keys();
HXDLIN( 323)			while(( (bool)(id->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 323)				::String id1 = ( (::String)(id->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 325)				bool _hx_tmp;
HXDLIN( 325)				if (hx::IsNotNull( type )) {
HXLINE( 325)					_hx_tmp = this->exists(id1,type);
            				}
            				else {
HXLINE( 325)					_hx_tmp = true;
            				}
HXDLIN( 325)				if (_hx_tmp) {
HXLINE( 327)					items->push(id1);
            				}
            			}
            		}
HXLINE( 333)		return items;
            	}


void DefaultAssetLibrary_obj::loadBitmapData(::String id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_340_loadBitmapData)
HXLINE( 340)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(HX_("WORK",d1,c9,bd,39));
HXDLIN( 340)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(this->getBitmapData_dyn());
HXDLIN( 340)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(id);
HXDLIN( 340)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(handler);
HXDLIN( 340)		::DefaultAssetLibrary_obj::loading++;
            	}


void DefaultAssetLibrary_obj::loadBytes(::String id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_347_loadBytes)
HXLINE( 347)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(HX_("WORK",d1,c9,bd,39));
HXDLIN( 347)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(this->getBytes_dyn());
HXDLIN( 347)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(id);
HXDLIN( 347)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(handler);
HXDLIN( 347)		::DefaultAssetLibrary_obj::loading++;
            	}


void DefaultAssetLibrary_obj::loadFont(::String id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_354_loadFont)
HXLINE( 354)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(HX_("WORK",d1,c9,bd,39));
HXDLIN( 354)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(this->getFont_dyn());
HXDLIN( 354)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(id);
HXDLIN( 354)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(handler);
HXDLIN( 354)		::DefaultAssetLibrary_obj::loading++;
            	}


void DefaultAssetLibrary_obj::loadManifest(){
            	HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_361_loadManifest)
HXLINE( 361)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 370)			 ::openfl::_legacy::utils::ByteArray bytes = ::openfl::_legacy::utils::ByteArray_obj::readFile(HX_("manifest",af,fb,29,d0));
HXLINE( 373)			if (hx::IsNotNull( bytes )) {
HXLINE( 375)				bytes->position = (int)0;
HXLINE( 377)				if ((bytes->length > (int)0)) {
HXLINE( 379)					::String data = bytes->readUTFBytes(bytes->length);
HXLINE( 381)					bool _hx_tmp;
HXDLIN( 381)					if (hx::IsNotNull( data )) {
HXLINE( 381)						_hx_tmp = (data.length > (int)0);
            					}
            					else {
HXLINE( 381)						_hx_tmp = false;
            					}
HXDLIN( 381)					if (_hx_tmp) {
HXLINE( 383)						::cpp::VirtualArray manifest = ( (::cpp::VirtualArray)(::haxe::Unserializer_obj::run(data)) );
HXLINE( 385)						{
HXLINE( 385)							int _g = (int)0;
HXDLIN( 385)							while((_g < manifest->get_length())){
HXLINE( 385)								 ::Dynamic asset = manifest->__get(_g);
HXDLIN( 385)								_g = (_g + (int)1);
HXLINE( 387)								if (!(this->className->exists(( (::String)(asset->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) )))) {
HXLINE( 389)									this->path->set(( (::String)(asset->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) ),( (::String)(asset->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
HXLINE( 390)									{
HXLINE( 390)										::Dynamic this1 = this->type;
HXDLIN( 390)										::String key = ( (::String)(asset->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) );
HXDLIN( 390)										( ( ::haxe::ds::StringMap)(this1) )->set(key,::Type_obj::createEnum(hx::ClassOf< ::openfl::_legacy::AssetType >(),( (::String)(asset->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) ),null()));
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            			else {
HXLINE( 402)				::haxe::Log_obj::trace(HX_("Warning: Could not load asset manifest (bytes was null)",83,9c,5b,2e),hx::SourceInfo(HX_("DefaultAssetLibrary.hx",12,89,c4,0f),402,HX_("DefaultAssetLibrary",2c,3d,78,3a),HX_("loadManifest",f5,e7,92,89)));
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 408)				 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN( 408)				::String _hx_tmp2 = ((HX_("Warning: Could not load asset manifest (",73,7e,fd,21) + ::Std_obj::string(e)) + HX_(")",29,00,00,00));
HXDLIN( 408)				_hx_tmp1(_hx_tmp2,hx::SourceInfo(HX_("DefaultAssetLibrary.hx",12,89,c4,0f),408,HX_("DefaultAssetLibrary",2c,3d,78,3a),HX_("loadManifest",f5,e7,92,89)));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DefaultAssetLibrary_obj,loadManifest,(void))

void DefaultAssetLibrary_obj::loadMusic(::String id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_417_loadMusic)
HXLINE( 417)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(HX_("WORK",d1,c9,bd,39));
HXDLIN( 417)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(this->getMusic_dyn());
HXDLIN( 417)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(id);
HXDLIN( 417)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(handler);
HXDLIN( 417)		::DefaultAssetLibrary_obj::loading++;
            	}


void DefaultAssetLibrary_obj::loadSound(::String id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_424_loadSound)
HXLINE( 424)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(HX_("WORK",d1,c9,bd,39));
HXDLIN( 424)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(this->getSound_dyn());
HXDLIN( 424)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(id);
HXDLIN( 424)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(handler);
HXDLIN( 424)		::DefaultAssetLibrary_obj::loading++;
            	}


void DefaultAssetLibrary_obj::loadText(::String id, ::Dynamic handler){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,handler) HXARGC(1)
            		void _hx_run( ::openfl::_legacy::utils::ByteArray bytes){
            			HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_433_loadText)
HXLINE( 433)			if (hx::IsNull( bytes )) {
HXLINE( 435)				handler(null());
            			}
            			else {
HXLINE( 439)				::String callback1 = bytes->readUTFBytes(bytes->length);
HXDLIN( 439)				handler(callback1);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_429_loadText)
HXLINE( 431)		 ::Dynamic callback =  ::Dynamic(new _hx_Closure_0(handler));
HXLINE( 445)		this->loadBytes(id,callback);
            	}


void DefaultAssetLibrary_obj::_hx___load( ::Dynamic getMethod,::String id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_478___load)
HXLINE( 480)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(HX_("WORK",d1,c9,bd,39));
HXLINE( 481)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(getMethod);
HXLINE( 482)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(id);
HXLINE( 483)		::DefaultAssetLibrary_obj::workerIncomingQueue->add(handler);
HXLINE( 485)		::DefaultAssetLibrary_obj::loading++;
            	}


HX_DEFINE_DYNAMIC_FUNC3(DefaultAssetLibrary_obj,_hx___load,(void))

int DefaultAssetLibrary_obj::loaded;

int DefaultAssetLibrary_obj::loading;

 ::cpp::vm::Deque DefaultAssetLibrary_obj::workerIncomingQueue;

 ::cpp::vm::Deque DefaultAssetLibrary_obj::workerResult;

 ::cpp::vm::Thread DefaultAssetLibrary_obj::workerThread;

void DefaultAssetLibrary_obj::_hx___doWork(){
            	HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_452___doWork)
HXLINE( 452)		while(true){
HXLINE( 454)			 ::Dynamic message = ::DefaultAssetLibrary_obj::workerIncomingQueue->pop(true);
HXLINE( 456)			if (hx::IsEq( message,HX_("WORK",d1,c9,bd,39) )) {
HXLINE( 458)				 ::Dynamic getMethod = ::DefaultAssetLibrary_obj::workerIncomingQueue->pop(true);
HXLINE( 459)				 ::Dynamic id = ::DefaultAssetLibrary_obj::workerIncomingQueue->pop(true);
HXLINE( 460)				 ::Dynamic handler = ::DefaultAssetLibrary_obj::workerIncomingQueue->pop(true);
HXLINE( 462)				 ::Dynamic data = getMethod(id);
HXLINE( 463)				::DefaultAssetLibrary_obj::workerResult->add(HX_("RESULT",dd,14,07,bb));
HXLINE( 464)				::DefaultAssetLibrary_obj::workerResult->add(data);
HXLINE( 465)				::DefaultAssetLibrary_obj::workerResult->add(handler);
            			}
            			else {
HXLINE( 467)				if (hx::IsEq( message,HX_("EXIT",1e,bf,de,2d) )) {
HXLINE( 469)					goto _hx_goto_23;
            				}
            			}
            		}
            		_hx_goto_23:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(DefaultAssetLibrary_obj,_hx___doWork,(void))

void DefaultAssetLibrary_obj::_hx___poll(){
            	HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_492___poll)
HXLINE( 492)		if ((::DefaultAssetLibrary_obj::loading > ::DefaultAssetLibrary_obj::loaded)) {
HXLINE( 494)			if (hx::IsNull( ::DefaultAssetLibrary_obj::workerThread )) {
HXLINE( 496)				::DefaultAssetLibrary_obj::workerThread = ::cpp::vm::Thread_obj::create(::DefaultAssetLibrary_obj::_hx___doWork_dyn());
            			}
HXLINE( 500)			 ::Dynamic message = ::DefaultAssetLibrary_obj::workerResult->pop(false);
HXLINE( 502)			while(hx::IsEq( message,HX_("RESULT",dd,14,07,bb) )){
HXLINE( 504)				::DefaultAssetLibrary_obj::loaded++;
HXLINE( 506)				 ::Dynamic data = ::DefaultAssetLibrary_obj::workerResult->pop(true);
HXLINE( 507)				 ::Dynamic handler = ::DefaultAssetLibrary_obj::workerResult->pop(true);
HXLINE( 509)				if (hx::IsNotNull( handler )) {
HXLINE( 511)					handler(data);
            				}
HXLINE( 515)				message = ::DefaultAssetLibrary_obj::workerResult->pop(false);
            			}
            		}
            		else {
HXLINE( 521)			if (hx::IsNotNull( ::DefaultAssetLibrary_obj::workerThread )) {
HXLINE( 523)				::DefaultAssetLibrary_obj::workerIncomingQueue->add(HX_("EXIT",1e,bf,de,2d));
HXLINE( 524)				::DefaultAssetLibrary_obj::workerThread = null();
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(DefaultAssetLibrary_obj,_hx___poll,(void))


hx::ObjectPtr< DefaultAssetLibrary_obj > DefaultAssetLibrary_obj::__new() {
	hx::ObjectPtr< DefaultAssetLibrary_obj > __this = new DefaultAssetLibrary_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< DefaultAssetLibrary_obj > DefaultAssetLibrary_obj::__alloc(hx::Ctx *_hx_ctx) {
	DefaultAssetLibrary_obj *__this = (DefaultAssetLibrary_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DefaultAssetLibrary_obj), true, "DefaultAssetLibrary"));
	*(void **)__this = DefaultAssetLibrary_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DefaultAssetLibrary_obj::DefaultAssetLibrary_obj()
{
}

void DefaultAssetLibrary_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DefaultAssetLibrary);
	HX_MARK_MEMBER_NAME(className,"className");
	HX_MARK_MEMBER_NAME(path,"path");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(lastModified,"lastModified");
	HX_MARK_MEMBER_NAME(timer,"timer");
	 ::openfl::_legacy::AssetLibrary_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DefaultAssetLibrary_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(className,"className");
	HX_VISIT_MEMBER_NAME(path,"path");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(lastModified,"lastModified");
	HX_VISIT_MEMBER_NAME(timer,"timer");
	 ::openfl::_legacy::AssetLibrary_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DefaultAssetLibrary_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { return hx::Val( path); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		if (HX_FIELD_EQ(inName,"list") ) { return hx::Val( list_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { return hx::Val( timer); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { return hx::Val( exists_dyn()); }
		if (HX_FIELD_EQ(inName,"__load") ) { return hx::Val( _hx___load_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { return hx::Val( getFont_dyn()); }
		if (HX_FIELD_EQ(inName,"getPath") ) { return hx::Val( getPath_dyn()); }
		if (HX_FIELD_EQ(inName,"getText") ) { return hx::Val( getText_dyn()); }
		if (HX_FIELD_EQ(inName,"isLocal") ) { return hx::Val( isLocal_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getBytes") ) { return hx::Val( getBytes_dyn()); }
		if (HX_FIELD_EQ(inName,"getMusic") ) { return hx::Val( getMusic_dyn()); }
		if (HX_FIELD_EQ(inName,"getSound") ) { return hx::Val( getSound_dyn()); }
		if (HX_FIELD_EQ(inName,"loadFont") ) { return hx::Val( loadFont_dyn()); }
		if (HX_FIELD_EQ(inName,"loadText") ) { return hx::Val( loadText_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"className") ) { return hx::Val( className); }
		if (HX_FIELD_EQ(inName,"loadBytes") ) { return hx::Val( loadBytes_dyn()); }
		if (HX_FIELD_EQ(inName,"loadMusic") ) { return hx::Val( loadMusic_dyn()); }
		if (HX_FIELD_EQ(inName,"loadSound") ) { return hx::Val( loadSound_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lastModified") ) { return hx::Val( lastModified); }
		if (HX_FIELD_EQ(inName,"loadManifest") ) { return hx::Val( loadManifest_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getBitmapData") ) { return hx::Val( getBitmapData_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"loadBitmapData") ) { return hx::Val( loadBitmapData_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool DefaultAssetLibrary_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"loaded") ) { outValue = loaded; return true; }
		if (HX_FIELD_EQ(inName,"__poll") ) { outValue = _hx___poll_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loading") ) { outValue = loading; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__doWork") ) { outValue = _hx___doWork_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"workerResult") ) { outValue = workerResult; return true; }
		if (HX_FIELD_EQ(inName,"workerThread") ) { outValue = workerThread; return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"workerIncomingQueue") ) { outValue = workerIncomingQueue; return true; }
	}
	return false;
}

hx::Val DefaultAssetLibrary_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { path=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { timer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"className") ) { className=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lastModified") ) { lastModified=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool DefaultAssetLibrary_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"loaded") ) { loaded=ioValue.Cast< int >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loading") ) { loading=ioValue.Cast< int >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"workerResult") ) { workerResult=ioValue.Cast<  ::cpp::vm::Deque >(); return true; }
		if (HX_FIELD_EQ(inName,"workerThread") ) { workerThread=ioValue.Cast<  ::cpp::vm::Thread >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"workerIncomingQueue") ) { workerIncomingQueue=ioValue.Cast<  ::cpp::vm::Deque >(); return true; }
	}
	return false;
}

void DefaultAssetLibrary_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("className","\xa3","\x92","\x3d","\xdc"));
	outFields->push(HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("lastModified","\xbf","\xe7","\x59","\x78"));
	outFields->push(HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DefaultAssetLibrary_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(DefaultAssetLibrary_obj,className),HX_HCSTRING("className","\xa3","\x92","\x3d","\xdc")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(DefaultAssetLibrary_obj,path),HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(DefaultAssetLibrary_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsFloat,(int)offsetof(DefaultAssetLibrary_obj,lastModified),HX_HCSTRING("lastModified","\xbf","\xe7","\x59","\x78")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(DefaultAssetLibrary_obj,timer),HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo DefaultAssetLibrary_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &DefaultAssetLibrary_obj::loaded,HX_HCSTRING("loaded","\x05","\x48","\x6f","\x58")},
	{hx::fsInt,(void *) &DefaultAssetLibrary_obj::loading,HX_HCSTRING("loading","\x7c","\xce","\xf2","\x08")},
	{hx::fsObject /*::cpp::vm::Deque*/ ,(void *) &DefaultAssetLibrary_obj::workerIncomingQueue,HX_HCSTRING("workerIncomingQueue","\x6d","\xe3","\x92","\xfb")},
	{hx::fsObject /*::cpp::vm::Deque*/ ,(void *) &DefaultAssetLibrary_obj::workerResult,HX_HCSTRING("workerResult","\xfb","\x7f","\x0b","\x8f")},
	{hx::fsObject /*::cpp::vm::Thread*/ ,(void *) &DefaultAssetLibrary_obj::workerThread,HX_HCSTRING("workerThread","\xe8","\x91","\x40","\x15")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String DefaultAssetLibrary_obj_sMemberFields[] = {
	HX_HCSTRING("className","\xa3","\x92","\x3d","\xdc"),
	HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("lastModified","\xbf","\xe7","\x59","\x78"),
	HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("getBitmapData","\xef","\x11","\x33","\x90"),
	HX_HCSTRING("getBytes","\xf5","\x17","\x6f","\x1d"),
	HX_HCSTRING("getFont","\x85","\x0d","\x43","\x16"),
	HX_HCSTRING("getMusic","\x2f","\xe0","\x31","\x70"),
	HX_HCSTRING("getPath","\x5b","\x95","\xd4","\x1c"),
	HX_HCSTRING("getSound","\x59","\x9c","\xa3","\xe0"),
	HX_HCSTRING("getText","\x63","\x7c","\x7c","\x1f"),
	HX_HCSTRING("isLocal","\x21","\x6d","\x76","\x15"),
	HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"),
	HX_HCSTRING("loadBitmapData","\x7f","\xbf","\x71","\xca"),
	HX_HCSTRING("loadBytes","\x65","\x54","\xcf","\xd8"),
	HX_HCSTRING("loadFont","\x15","\x2f","\x60","\xb4"),
	HX_HCSTRING("loadManifest","\xf5","\xe7","\x92","\x89"),
	HX_HCSTRING("loadMusic","\x9f","\x1c","\x92","\x2b"),
	HX_HCSTRING("loadSound","\xc9","\xd8","\x03","\x9c"),
	HX_HCSTRING("loadText","\xf3","\x9d","\x99","\xbd"),
	HX_HCSTRING("__load","\x46","\xfd","\xaf","\xf6"),
	::String(null()) };

static void DefaultAssetLibrary_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DefaultAssetLibrary_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(DefaultAssetLibrary_obj::loaded,"loaded");
	HX_MARK_MEMBER_NAME(DefaultAssetLibrary_obj::loading,"loading");
	HX_MARK_MEMBER_NAME(DefaultAssetLibrary_obj::workerIncomingQueue,"workerIncomingQueue");
	HX_MARK_MEMBER_NAME(DefaultAssetLibrary_obj::workerResult,"workerResult");
	HX_MARK_MEMBER_NAME(DefaultAssetLibrary_obj::workerThread,"workerThread");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DefaultAssetLibrary_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DefaultAssetLibrary_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(DefaultAssetLibrary_obj::loaded,"loaded");
	HX_VISIT_MEMBER_NAME(DefaultAssetLibrary_obj::loading,"loading");
	HX_VISIT_MEMBER_NAME(DefaultAssetLibrary_obj::workerIncomingQueue,"workerIncomingQueue");
	HX_VISIT_MEMBER_NAME(DefaultAssetLibrary_obj::workerResult,"workerResult");
	HX_VISIT_MEMBER_NAME(DefaultAssetLibrary_obj::workerThread,"workerThread");
};

#endif

hx::Class DefaultAssetLibrary_obj::__mClass;

static ::String DefaultAssetLibrary_obj_sStaticFields[] = {
	HX_HCSTRING("loaded","\x05","\x48","\x6f","\x58"),
	HX_HCSTRING("loading","\x7c","\xce","\xf2","\x08"),
	HX_HCSTRING("workerIncomingQueue","\x6d","\xe3","\x92","\xfb"),
	HX_HCSTRING("workerResult","\xfb","\x7f","\x0b","\x8f"),
	HX_HCSTRING("workerThread","\xe8","\x91","\x40","\x15"),
	HX_HCSTRING("__doWork","\x1c","\x12","\x30","\xc7"),
	HX_HCSTRING("__poll","\x5f","\xe1","\x54","\xf9"),
	::String(null())
};

void DefaultAssetLibrary_obj::__register()
{
	hx::Object *dummy = new DefaultAssetLibrary_obj;
	DefaultAssetLibrary_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("DefaultAssetLibrary","\x2c","\x3d","\x78","\x3a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DefaultAssetLibrary_obj::__GetStatic;
	__mClass->mSetStaticField = &DefaultAssetLibrary_obj::__SetStatic;
	__mClass->mMarkFunc = DefaultAssetLibrary_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DefaultAssetLibrary_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DefaultAssetLibrary_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DefaultAssetLibrary_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DefaultAssetLibrary_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DefaultAssetLibrary_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DefaultAssetLibrary_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DefaultAssetLibrary_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_40_boot)
HXLINE(  40)		loaded = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_41_boot)
HXLINE(  41)		loading = (int)0;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_42_boot)
HXLINE(  42)		workerIncomingQueue =  ::cpp::vm::Deque_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_43_boot)
HXLINE(  43)		workerResult =  ::cpp::vm::Deque_obj::__alloc( HX_CTX );
            	}
}

